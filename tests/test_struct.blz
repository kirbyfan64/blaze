global var x: int
global var mz: int

struct A:
    mx: int
    mx: int
    x: int
    fun my -> int:
        let x = 1
        my(x)
        return mx
    mz: int

fun f:
    let a = new A
    a.my()
    a.undef[0] = 1

struct B:
    v: int
    fun new: @v = 0
    fun new(v: int): @setv(v)
    mut fun setv(v: int): @v = v

fun g:
    let b1 = new B
    let b2 = new B(1)
    b1.setv(1)
    b2.setv()

#[
ERROR
:6:5: error: duplicate definition of mx
    mx: int
    ~~
:5:5: note: previous definition is here
    mx: int
    ~~
:9:13: warning: redefinition of x shadows outer definition
    let x = 1
        ~
:1:12: note: previous definition is here
    global var x: int
               ~
:10:9: error: identifier 'my' cannot be accessed without @
    my(x)
    ~~
:8:9: note: 'my' declared here
    fun my -> int:
        ~~
:11:16: error: identifier 'mx' cannot be accessed without @
    return mx
           ~~
:5:5: note: 'mx' declared here
    mx: int
    ~~
:10:9: error: function expected 0 argument(s), not 1
    my(x)
    ~~
:8:9: note: 'my' declared here
    fun my -> int:
        ~~
:4:8: error: struct must have a constructor
    struct A:
           ~
:17:7: error: undefined attribute 'undef'
    a.undef[0] = 1
      ~~~~~
:15:9: note: 'a' declared here
    let a = new A
        ~
:17:12: error: left-hand side of assignment must be variable
    a.undef[0] = 1
           ~
:15:9: note: 'a' declared here
    let a = new A
        ~
:17:7: note: add 'var' to make it variable
    a.undef[0] = 1
      ~~~~~
:28:8: error: no overload of 'setv' with given arguments available
    b1.setv(1)
       ~~~~
:23:13: note: function requires a mutable this
    mut fun setv(v: int): @v = v
            ~~~~
:26:9: note: 'b1' declared here
    let b1 = new B
        ~~
:26:9: note: add 'mut' to make it mutable
    let b1 = new B
        ~~
:29:8: error: no overload of 'setv' with given arguments available
    b2.setv()
       ~~~~
:23:13: note: function expected 1 argument(s), not 0
    mut fun setv(v: int): @v = v
            ~~~~
#]
