# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

global true: bool = 1 :: bool
global false: bool = 0 :: bool
global null: *byte = 0 :: size :: *mut byte

global argc: int "__blaze_argc"
global _c_argv: **char "__blaze_argv"

fun _calloc(n: size, sz: size) -> *mut byte "calloc"
fun _realloc(ptr: *byte, sz: size) -> *mut byte "realloc"
fun _puts(s: *char) "puts"
fun _free(d: *byte) "free"

fun _strlen(d: *char) -> size "strlen"
fun _memcpy(tgt: *mut byte, src: *byte, len: size) "memcpy"

fun _sprintf_d(tgt: *mut char, fm: *char, arg: int) -> int "sprintf"
fun _snprintf_d(tgt: *mut char, len: size, fm: *char, arg: int) -> int "snprintf"

struct str:
    _data: *mut char
    len: size

    mut fun _setup(len: size) -> *char:
        @len = len
        @_data = _calloc(@len+1, 1) :: *char
        @_data[@len] = 0

    # THIS CONSTRUCTOR MUST BE FIRST!! The compiler internals depend on it!
    fun new(s: *char, len: size):
        @_setup(len)
        _memcpy(@_data :: *mut byte, s :: *byte, len)

    fun new(len: size): @_setup(len)

    fun delete:
        _free(@_data :: *byte)

    fun dup -> str:
        let s = new str(@len)
        _memcpy(s._data :: *mut byte, @_data :: *byte, @len+1)
        return s

    fun [](i: size) -> char: return @_data[i]

    fun bool -> bool: return @len != 0

fun print(s: str):
    _puts(s._data)

fun argument(i: int) -> str:
    let arg = _c_argv[i]
    let len = _strlen(arg)
    let mut s = new str(len)
    _memcpy(s._data :: *byte, arg :: *byte, len+1)
    return s

fun tos(i: int) -> str:
    let len = _snprintf_d(null :: *mut char, 0, "%d"._data, i)
    let mut tgt = new str(len :: size)
    _sprintf_d(tgt._data, "%d"._data, i)
    return tgt

struct list[T]:
    var _data: *mut T
    var _sz: size
    var len: size

    mut fun _resize:
        let data = _realloc(@_data :: *byte, @len*@_sz)
        if data == null:
            _free(@_data :: *byte)
            @_data = null :: *mut T
            @len = 0
            return
        @_data = data :: *mut T

    fun new(len: size, sz: size):
        @len = len
        @_sz = sz
        @_data = null :: *mut T
        if len: @_resize()

    mut fun append(x: T):
        let last = @len
        @len = last+1
        @_resize()
        if @len:
            @_data[last] = x
        return

    fun [](i: size) -> T: return @_data[i]
    fun &[](i: size) -> *mut T: return &@_data[i]

    fun delete: _free(@_data :: *byte)
