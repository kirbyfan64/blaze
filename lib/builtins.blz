global true: bool = 1 :: bool
global false: bool = 0 :: bool

global _c_argc: int "__blaze_argc"
global _c_argv: **char "__blaze_argv"

fun _calloc(n: size, sz: size) -> *mut byte "calloc"
fun _puts(s: *char) "puts"
fun _free(d: *byte) "free"

fun _strlen(d: *char) -> size "strlen"
fun _memcpy(tgt: *mut char, src: *char, len: size) "memcpy"

struct str:
    _data: *mut char
    len: size

    mut fun _setup(len: size) -> *char:
        @len = len
        @_data = _calloc(@len+1, 1) :: *char
        @_data[@len] = 0

    # THIS CONSTRUCTOR MUST BE FIRST!! The compiler internals depend on it!
    fun new(s: *char, len: size):
        @_setup(len)
        _memcpy(@_data, s, len)

    fun new(len: size): @_setup(len)

    fun delete:
        _free(@_data :: *byte)

    fun dup -> str:
        let s = new str(@len)
        _memcpy(s._data, @_data, @len+1)
        return s

    fun at(i: size) -> char: return @_data[i]

fun print(s: str):
    _puts(s._data)

fun argument(i: int) -> str:
    let arg = _c_argv[i]
    let len = _strlen(arg)
    let mut s = new str(len)
    _memcpy(s._data, arg, len+1)
    return s
